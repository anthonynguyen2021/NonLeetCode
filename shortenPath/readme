Write a function that takes in a non-empty string representing a valid Unix-shell path and returns a shortened version of that path.

A path is a notation that represents the location of a file or directory in a file system.

A path can be an absolute path, meaning that it starts at the root directory in a file system (string starts with "/"), or a relative
path (string doesn't start with "/"), meaning that it starts at the current directory in a file system.

In a Unix-like operating system, a path is bound by the following rules:

a) The root directory is represented by a '/' initially. This means that if a path starts with "/", it's an absolute path; if it doesn't, it's
a relative path.

b) The symbol "/" otherwise represents the directory separator. This means that t he path "/foo/bar" is the location of the directory bar
inside the directory foo, which is itself located inside the root directory. Note: "//" really is just "/".

c) The symbol .. represennts the parent directory (go up one level). This means that accessing files or directories in /foo/bar/..
is equivalent to accessing files or directories in /foo. 

d) The symbol . represnets the current directory. This means that accessing files or directories in /foo/bar/. is equivalent to accessing
files or directories in /foo/bar. Note that ./ path is not valid as this means currently directory which we don't know.

e) The symbols / and . can be repeated sequentially without consequence; the symbol .. cannot, however, because repeating it sequentially means going
further up in parent directories. For instance, /foo/bar/baz/././. and /foo/bar/baz are equivalent paths, but /foo/bar/baz/../../../ and
/foo/bar/baz definitely aren't. The only exception is with the root directory: /../../.. and / are equivalent, because the root
directory has no parent directory, which means that repeatedly accessing parent directories does nothing in a root directory.

Note that the shortened versionn of the path must be equivalent to the original path. In other wordss, it must point to the same
file or directory as the original path.

Input: path = "/foo/../test/../test/../foo//bar/./baz"

Output: "/foo/bar/baz"  # ../ means go up one fold, so the segment foo/../ is removed, test/../ is removed, and test/../ is removed (2nd instance)
